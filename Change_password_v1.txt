<#	
	.NOTES
	===========================================================================
	 Created on:   	6/30/2018 1:00 AM
	 Created by:   	Administrator
	 Organization: 	
	 Filename:     	
	===========================================================================
	.DESCRIPTION
		A description of the file.
#>

#----------------------------------------------	
# Import Required Modules
#----------------------------------------------

Import-Module ActiveDirectory

#---------------------------------------------

$scriptpath = (Get-Location).path

$run_date = $(Get-Date -format "dd-MMM-yyyy HH:mm:ss")

$logfile = $(Get-Date -format "yyyy-MM") + "-UserMustChangePassword.log"

#---------------------------------------------



#----------------------------------------------
# Log Function Declaration. 
#----------------------------------------------

function log($string, $color)
{
	
	if ($color -eq $null) { $color = "white" }
	
	Write-Host $(Get-Date -format "dd-MMM-yyyy-HH-mm") $string -foregroundcolor $color
	
	$date = $(Get-Date -format "dd-MMM-yyyy HH:mm:ss")
	
	$string = $date + " " + $string
	
	$string | out-file -Filepath $scriptpath\$logfile -append
	
}

#-----------------------------------------------

function Change-Setting
{
	
	$OU_Name = ("AMAS", "APAC", "EMEA")
	
	$Groups_Name = ("AG-AG-SSO-SessionModeUsers", "AG-FL-SSO-SessionModeUsers")
	
	$dn = Get-ADDomain | Select DistinguishedName
	
	$dn = $dn.DistinguishedName
	
	foreach ($OU in $OU_Name)
	{
		
		log "Searching groups in $OU" "yellow"
		
		
		foreach ($grp in $Groups_Name)
		{
			
			$groups = Get-ADobject -Filter 'ObjectClass -eq "group"' -SearchBase "OU=$OU,$dn" | Select Name | Where { $_.name -like "$grp" }
			
			log "Capture Group Name $groups from $OU"
			
			If ($groups)
			{
				
				
				$members_name = Get-ADGroupMember -Identity $groups.Name | Select SamAccountName
				
				log "Capturing Group Members from Specific Group"
				
				foreach ($member in $members_name)
				{
					log "Working on Group Member $member"
					Try
					{
						
						
						
						
						Set-ADUser -Identity $member.SamAccountName -ChangePasswordAtLogon $true
						log "Setting Password NeverExpires to true for $($member.SamAccountName) " "green"
						
					}
					Catch
					{
						log "Password NeverExpires to true for $($member.SamAccountName)" "Red"
					}
					
				}
				
				
				
				
			}
			
			
			
		}
		
		
		
		
		
		
	}
	
	
	
	
}
Change-Setting
